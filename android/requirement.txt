requirement
● 产品简介
● 这是一个诗词创作App的产品需求文档
## 开发者说明
● 
以下内容需要开发者手动实现：
1. 词牌库数据：准备SQL脚本导入词牌示例数据
2. 字体资源：
   - 行书字体：添加至app/src/main/assets/fonts/calligraphy/
   - 命名规范：[字体名]_regular.[扩展名]
3. 卡片背景：
- 5种默认背景图片添加至app/src/main/res/drawable/
4. API配置：
   - 在build.gradle中添加DeepSeek依赖
   - 在配置文件中添加API base URL
5. 文档资源：
   - API申请指南文档添加至app/src/main/assets/docs/
● 产品功能设计
● 登录与用户认证
● 只有一种用户身份，没有管理员身份。
● 采用用户名+密码的登录模式。按照常规的模板设计，包括控制长度等等。
● 用户进入应用登录首页后会看见登录和注册按钮，以及用户名和密码两个选项。
● 注册功能
● 未注册的用户无法直接通过用户名和密码登录
● 需要点击注册按钮后进入注册界面。在注册界面输入用户名、密码、密码重复确认。确认一致后成功创建账户
● 注册界面也有返回按钮，点击后可返回登录页面
● 登录功能
● 用户注册账户成功后，可通过注册时的用户名和密码，点击登录按钮进入主界面
● 当密码或用户名不正确时，分别在输入框下显示用户名不正确或密码不正确。
● 功能1 诗词、句子、残句的卡片记录与保存
● 在主页面，可以点击创作按钮进入卡片创作页面。
● 用户可以通过输入法输入诗词、句子等中文，并显示在卡片上。
● 设置按钮位于卡片的右上角。
● 需要使用美观的楷体、宋体。用户可以点击设置按钮打开设置的小窗口。并点击字体选择按钮进行字体选择。
● 在字体选择界面，用户可以选择楷体、宋体，如果有免费的行书字体资源也可以加入，用户也可以点击字体选择界面上的加号，打开字体导入窗口。
● 用户可以在字体导入窗口导入外部的字体资源。
● 用户可以调节字体大小，类似word。用户可以点击设置按钮打开设置的小窗口。并点击字体大小按钮进行字体大小选择。
● 设置的小窗口中字体大小按钮，是一个左边是减号，右边是加号，中间显示字体大小文本的按钮。通过点击加号/减号进行调节。字体大小不应该太大导致超过卡片范围。
● 在卡片创作页面，用户输入的诗词、句子文本会根据用户设置的字体大小自动换行，适配界面。默认的字体大小，需要保持合理的字间距和行间距，达到美观的展示效果。
● 用户可以选择文本的竖排或者横排。用户可以点击设置按钮打开设置的小窗口。并点击排列方向按钮进行排列方向选择。
● 点击排列方向按钮后，会弹出排列方向选择的界面。页面上只有两个选项。点击竖排按钮，竖排按钮亮起，卡片上输入的文本都会呈现横排。点击横排按钮，横排按钮亮起，卡片上输入的文本都会呈现横排。
● 用户也可以在设置中调节字体颜色。请在设置窗口设计一个选项框，使得用户可以选择黑色、白色、金色、暗红色等几种美观的字体颜色
● 保存
● 卡片右下角有一个保存按钮，点击保存按钮后，卡片将会保存。用户可以在主界面的我的作品中查看。详见功能6。
● 功能2 选择卡片 推荐词牌，并推荐一首对应格式诗词
● 卡片右下角有一个推荐词牌的按钮。当用户点击推荐词牌的按钮后，创作卡片界面下方会出现一个词牌推荐页面弹出（向上滑出，页面上端有一个向下的箭头按钮，点击后会滑下去，重新显示原来的创作卡片界面）。
● 应用会根据卡片上用户输入的文本，匹配诗词库里的诗词，并根据匹配结果返回对应的词牌。每一个推荐的词牌为一个方形按钮，点击后出现推荐诗词展示界面，用户可以看到诗词库里对应词牌的诗词。展示形式需要比较美观。
● 如果卡片上用户没有输入文本，则显示没有输入文本。
● 如果卡没有匹配到相同格式的词牌，则显示没有匹配到相同格式的词牌。
● 词牌推荐页面也有一个搜索框，用户可以直接搜索来选择词牌，同样点击去可以进入推荐诗词展示界面，用户可以看到诗词库里对应词牌的诗词。
● 在推荐诗词展示界面，下面有一个按钮：选择该词牌为模板。点击后会进入诗词创作页面。
● 诗词库
● 诗词库可以由我在开发文件中输入，输入内容为不同词牌的代表性诗词各一首，返回的变量为词牌名。
● 输入的诗词会被按标点符号断句，形成分块来适应匹配需求。
● 匹配逻辑：
● 根据用户在卡片上输入的文本，匹配有相同字数格式的诗词，并返回对应的词牌名，可以一次性返回所有推荐的词牌名，并显示在词牌推荐页面上。每一个推荐的词牌为一个方形按钮，点击后出现推荐诗词展示界面，用户可以看到诗词库里对应词牌的代表性诗词。展示形式需要比较美观。
● 匹配目标：词牌库中每首词的分句字数序列（按标点分隔后计算每句字数）。
● 匹配方式：查找词牌库中是否存在至少一个分句序列与用户输入卡片的整个分句序列完全一致（如用户输入是“5，5”，则找词牌中有“5，5”分句序列的词牌）
● 数据库设计提示： 需要在词牌库数据结构中存储每个词牌的代表性诗词，以及解析后存储其分句字数序列?（如 [4, 7, 5, 5]）。这个代表性诗词文本开发者（我）可以在文件中修改。
● 诗词库解析例子：
● 按一个句号作为一组，一个逗号分一次句：比如以临江仙·滚滚长江东逝水为例。
● 滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。青山依旧在，几度夕阳红。
● 白发渔樵江渚上，惯看秋月春风。一壶浊酒喜相逢。古今多少事，都付笑谈中。
● 这个可以解析为[[7,5],[7],[5,5],[7,5],[7],[5,5]]
● 匹配例子：
● 卡片上用户输入的文本: 长夜邀孤月，予我半天星。
● 逻辑，依据用户输入“ 长夜邀孤月，予我半天星。”是“5个字，5个字。”的格式。匹配到词牌水调歌头、临江仙等词牌也有这个“5个字，5个字。”格式的句子。所以返回这些词牌作为推荐词牌。
● 请设计可以适配这个功能的数据库或者对应文件。
● 用户在词牌推荐页面上点击一个推荐的词牌对应的方形按钮后，会进入推荐诗词展示界面。推荐诗词展示页面中，用户可以看到诗词库里对应词牌的代表性诗词。（这里的展示也要美观，最好用卡片的默认格式比较方便）下面有一个按钮：选择该词牌为模板。点击后会进入诗词创作页面。
● 在诗词创作页面中，卡片背景会显示对应词牌格式的下划线，用户可以在对应下划线上填字。同时词牌格式中与用户卡片上所输入的句子 相同的部分会高亮表示，此时可能一个词牌中会有多个相同格式字数的地方，都会高亮表示。此时会提示用户可以选择一个高亮的区域，自动将之前卡片上的诗词句子填入高亮的区域。
● 在诗词创作页面中，注意正文的下划线上方也有两行分别供用户填入作品名称和作者
● 例子：
● 比如用户点击推荐词牌中临江仙这个词牌进入推荐诗词展示界面。推荐诗词展示页面中，用户可以看到诗词库里对应临江仙词牌的代表性诗词。这里比如用户可以看到“临江仙·送钱穆父：
● 一别都门三改火，天涯踏尽红尘。依然一笑作春温。无波真古井，有节是秋筠。
● 惆怅孤帆连夜发，送行淡月微云。尊前不用翠眉颦。人生如逆旅，我亦是行人。”
● 然后用户点击择该词牌为模板。点击后会进入诗词创作页面。然后在诗词创作页面中，卡片背景会显示对应词牌格式的下划线，用户可以在对应下划线上填字：
● 首先是两行分别供用户填入作品名称和作者
● 然后是正文的下划线如下：
● _______,______。________。_____,_____。
● _______,______。________。_____,_____。
● 在这里，因为该词牌中，有两个与“5个字，5个字。”格式相同字数的地方，都会高亮表示。此时会提示用户可以选择一个高亮的区域，自动将之前卡片上的诗词句子填入高亮的区域。比如用户选择了“5个字，5个字。”格式的第一个高亮区域。现在自动填入后变成
● _______,______。________。长夜邀孤月，予我半天星。
● _______,______。________。_____,_____。
● 在诗词创作页面中，有如下几个按钮。1：推荐韵脚（在功能3详细说明）2：分享（在功能4详细说明）3：设置（功能和卡片创作界面相同）4：灵感（在功能5详细说明）
● 功能3 选择卡片 推荐韵脚，并推荐该韵脚常用词
● 在诗词创作页面中，点击推荐韵脚按钮。此时会从屏幕下端滑出一个推荐韵脚页面。推荐韵脚页面上部有一个搜索框，此时用户可以输入一个词或者一句话（搜索框内提示用户可以输入一个字、词或者一句话），程序会根据这个字或者这句话的最后一个字确定用户要搜索的韵脚，并在韵脚库里搜索并返回该韵脚的常用词。
● 搜索框默认值：? 可以考虑在用户进入此界面时，如果光标在诗词创作页面的某个下划线上（或选中了某个字），自动将这个字/词（尤其是光标所在位置的字）填入推荐韵脚页面的搜索框，作为初始查询值。
● 请你注意拼音为yun的字应该搜索“ün”的韵脚对应的字
● 例子：
● 例如用户搜索 “中”
● 此时用户只输入了一个字，那么程序会可以直接确定这个字是用户要搜索的韵脚，“中”为“ ong ”韵，并在韵脚库里搜索并返回“ong”韵脚的常用词，比如“冬、农、宗、钟、龙、浓” 等
● 韵脚库说明
● 韵脚库可以由我在开发文件中输入修改，输入内容为按不同韵脚分类的字。
● 韵脚分类如下：
● 1、（ong,iong )
● 中、松、空、功、通、钟、终、从、丛、同、绒、童、龙、红、重、动、涌、东、冻、攻、冬、浓、胸、穷、雄、弄、送、颂、痛、众、宠、懂、孔、匆、拥、咏、工、荣
● 2、(en,eng)
● 风、梦、朋、生、声、灯、城、成、程、能、胜、腾、冷、盛、横、绳、登、增、征、争、层、赠、逢、奉、捧、猛、春、深、人、门、分、身、本、粉、针、恨、神、温、痕、们、盆、仁、沉、尘、陈、臣、枕、诊、狠、肯、忍、辰、晨、认、慎、镇、振、恩、奔、纷、根、真、珍、任、阵、问、稳、吻、滚、盾、困、顺、润、闻、文、
● 3、(in,ing)
● 情、性、名、兵、星、明、病、定、镜、行、青、兴、轻、鸣、亭、惊、英、鹰、灵、敬、晴、停、京、睛、领、岭、请、艇、醒、映、庆、幸、晶、应、境、静、听、厅、心、品、进、亲、新、音、今、金、林、劲、尽、信、民、勤、琴、银、邻、临、引、饮、紧、锦、因、阴、荫、宾、襟、津、巾、薪、寝、印、鬓、近、吟、您、贫、聘、敏
● 4、(a，ia，Ua)
● 华、家、发、化、话、画、马、法、打、花、茶、价、下、沙、杀、纱、麻、达、察、塔、瓜、卡、骂、霸、洒、霞、假、雅、牙、芽、怕、娃、鸭、夏、啊、他、厦、差、拉、妈、答、靶、挂、瘩、疤、嫁、拿、吗、爸、峡、侠、佳、夹、涯、吧、嘛、垮、夸、帕、踏、丫、洼、筏、轧、啥、俩、砸、呀、她
● 5、(un)
● 文、论、闻、村、损、笋、准、轮、伦、昏、婚、孙、存、唇、魂、棍、吞、顿、盾、滚、困、顺、润、尊、谆、纯、吮、昆、仑、馄、饨、臀
● 6、(ün)
● 云、军、寻、君、群、裙、训、允、俊、峻、勋、讯、韵、运、晕、均、钧、筠、运、韵、吮
● 7、（o，uo）
● 多、火、国、过、落、果、波、坡、所、作、拙、浊、酌、驮、搓、朵、躲、诺、烁、脱、桌、夺、锣、阔、获、惑、托、错、索、搓、妥、握、措、漠、寞、摩、魔、磨、搏、博、泊、魄、播、迫、拨、剥、我、窝、着、螺、拙、浊、酌、驮、搓、朵、躲、诺、烁、脱、桌、夺、锣、阔、获、惑、托、错、索、搓、妥、握、措、漠、寞、波、坡、摩、魔、磨、搏、博、泊、魄、播、迫、拨、剥、我、窝、着、螺
● 8、(e)
● 河、车、客、色、课、热、德、和、合、刻、乐、策、册、测、设、革、格、隔、阁、何、壳、哥、戈、鸽、喝、渴、舍、恶、鹤、泽、择、则、责、辙、扯、奢、娥、涉、特、瑟、涩
● 9、（i）
● 奇、击、笔、底、米、礼、体、里、鸡、级、计、济、极、机、及、集、衣、旗、席、力、地、戏、弟、系、利、意、义、气、立、敌、你、起、技、期、记、妻、已、理、议、异、艺、丽、迷、泥、稀、息、移、碧、益、翼、逸、役、历、密、易、挤、姬、弃、泣、帝、季、寂、替、细、西、喜、绩、激、批、宜、怡、疑、笛、比、迹、洗、以、际、溪、戚、逼、低、堤、基、滴、依、医、提、啼、习、励、吸、悉、昔、避、毕、溢、译、题、事、市、子、字、实、石、食、识、止、室、日、制、势、是、世、士、试、枝、知、汁、吃、诗、师、失、纸、齿、史、志、致、思、丝、词、死、职、迟、池、时、视、质、逝、资、私、辞、持、址、释、誓、始、滋、姿
● 10、（ü）
● 雨、曲、区、鱼、女、去、语、玉、句、局、誉、欲、屈、菊、域、絮、续、遇、浴、举、旅、缕、侣、取、绿、律、趣
● 11、（ai，uai）
● 才、爱、外、台、彩、白、来、赛、派、脉、海、害、戴、盖、材、牌、塞、态、在、载、菜、代、怀、坏、快、帅、排、开、拍、采、睬、猜、债、寨、栽……
● 12、（iang，uang）
● 光、江、枪、香、望、阳、厂、党、方、上、想、长、场、章、向、堂、唱、房、王、装、霜、亡、床、掌、赏、网、往、像、巷、窗、样、亮、伤、汤、张、邦、苍、荡、放、浪、肠、航、行、郎、忙、茫、爽、忘、壮、相、乡、扬、杨、洋、芳、养、奖、响、良、粮、凉、量、娘、强、妆、庄、藏、常、昂、旁、爱、谎、况、撞、访、朗、舱、冈、扛、康、丈、仗、仰、讲、桨
● 13、（ei，ui，uei）
● 伟、会、飞、威、回、岁、费、备、归、规、泪、妹、内、眉、醉、罪、退、美、雷、队、水、谁、对、贵、碑、悲、杯、非、危、微、吹、北、累、辈、为、梅、媒、嘴、位、味、随、辉、媚、倍、徽、慰、鬼
● 14、（ie，üe）
● 亚、月、雪、界、学、夜、节、叶、血、解、写、结、别、约、绝、谢、切、贴、野、接、烈、姐、蝶、戒、捷、洁、杰、跃、悦
● 15、(an，ian，uan，üan )
● 线、面、眼、点、演、谈、板、天、团、年、前、钱、见、言、山、变、电、权、员、缘、全、怨、愿、泉、远、选、战、站、片、淡、饭、难、然、短、管、暖、关、观、传、船、还、办、岸、半、间、肩、安、班、干、园、圆、源、看、脸、箭、恋、田、闲、弦、边、算、烟、燕、产、胆、返、感、烦、凡、寒、骗、兰、衫、滩、摊、残、浅、险、念、现、冤、宴、雁、艳、便、范、汉、烂、慢、盼、善、欢、宽、酸、玩、染、散、展、颜、连、莲、换、乱、转、断、单、丹、帆、件、剑、晚、沿、遍、弯、篇、迁、验、漫、倦、劝、悬、旋、颤、盘、帘、廉、绵、辨、辩、担、串、患、畔、川、穿、端、扮、灿、原、尖、炼、赶、敢、喊、坎
● 16、（ao，iao）
● 笑、调、表、角、脚、掉、校、教、料、道、号、报、草、宝、倒、岛、桥、条、药、了、鸟、巧、小、好、老、脑、操、刀、高、帽、闹、套、造、照、票、跳、效、劳、摇、叫、靠、貌、早、枣、找、抱、到、导、宵、谣、跑、绕、扰、少、胞、飘、挑、骚、涛、招
● 17、（u）
● 主、务、悟、处、竹、烛、舞、途、图、足、出、树、数、术、木、目、怒、入、书、骨、虎、苦、物、步、度、渡、富、户、复、故、顾、除、土、鼓、服、伏、湖、助、住、注、著、录、幕、毒、读、福、俗、呼、乎、哭、枯、奴、如、祝、雾、楚、睹、斧、珠、无、促、逐、伍、午、独、浮、拂、糊、涂、卒、陆、绿、碌、暮、墓、慕、污、屋、粗、初、肤、暑、诉、宿、腑、抚、述、束、疏、输、舒、谷、肚、赴、付、酷、负、腹、固
● 18、(iu，ou，jou )
● 秋、流、友、球、牛、手、口、斗、头、酒、楼、仇、柳、愁、肉、厚、后、忧、稠、右、有、油、休、游、修、由、留、求、守、首、走、狗、收、州、舟、受、瘦、就、透、日、奏、袖、秀、救、诱、钩、兽、候、周、幽、悠、究、羞、久、朽、扣、投、偶、抖、否、柔、凑、够、吼
● 返回该韵脚的常用词会显示在推荐韵脚页面的中下部，并在侧方有一个滑动条（列表视图、滚动视图）来翻页查看超出页面范围的字。
● 推荐韵脚页面的上端有一个向下的箭头。点击该箭头，推荐韵脚页面会滑动回到屏幕下端收起。用户再次点击推荐韵脚按钮，推荐韵脚页面又会重新滑出。
● 功能4  写作完诗词后生成分享卡片 
● 在诗词创作页面中，点击推荐分享按钮，此时会进入卡片生成页面。
● 在卡片生成页面中，左下角为卡片背景按钮，点击卡片背景按钮，此时弹出卡片背景选择窗口，在该窗口中，用户可以选择默认的三种卡片背景，也可以选择导入外部图片作为背景。
● 默认的5种卡片背景： 1  婉约风格：需设计淡雅风格背景图片。比如可以在角落放置梅花，折扇等中国古典装饰品来突出淡雅风格。记得主体要留白给用户卡片上的诗词。2  豪放风格：需设计浓烈风格背景图片。比如可以在角落放置水墨风骏马，宝剑等中国古典装饰品来突出淡雅风格。记得主体要留白给用户卡片上的诗词。3 空白风格：这个风格的卡片最好由你自己给我选一个或设计一个。比如使用朴素的、宣纸色的空白背景。4：纯色风格·朱红。请你选择一个朱红色的纯色卡片背景。5：纯色风格·淡黑。请你选择一个淡黑色的纯色卡片背景。（背景图片开发者可在文件中修改）
● 默认卡片背景风格为纯色风格·淡黑，所有默认字体（包括卡片创作页面）为白色。
● 用户导入外部图片作为背景：点击卡片背景选择窗口的加号键，可以打开本地文件选择导入背景图片格式的文件作为背景。请注意导入的图片需要自动缩放或裁剪来适应卡片大小
● 在卡片生成页面中，右下角为卡片生成按钮，点击卡片生成按钮，下方会弹出一个窗口，窗口内有保存到本地的按钮。用户点击该按钮，该卡片以图片格式可自动保存到本地，注意卡片的背景如果用户没有选择，那就默认是空白风格。窗口中也有一个保存到我的作品的按钮。用户点击该按钮，卡片将会保存。用户可以在主界面的我的作品中查看。详见功能6。
● 功能5 调用大模型补全诗词
● 在诗词创作页面，点击灵感按钮，会进入大模型补全诗词界面。该界面上部有一个API key 按钮。点击该按钮弹出API key 窗口，该窗口提供一个文本输入框，用户可以输入或粘贴一个API key （默认deepseek），下方有一个打开教学文档的按钮，用户点击该按钮后可以打开一个docx文档（应用外部打开），该文档由（我） 开发者上传，告诉用户如何申请自己的deepseek的API key。
● API Key 在应用内必须以安全方式存储（如Android Keystore）。APIkey窗口输入框下方用户还可以选择是否记住APIkey（勾选）
● 网络与错误处理：? 遇到调用API时的网络状态处理（无网络、超时）、API返回错误（如无效Key、额度不足）的提示方式。请正常提示用户，比如无网络、无效key、额度不足等中文提示。
● 大模型补全诗词界面中部是一个prompt输入框。用户在prompt输入框中可以输入prompt，并点击右侧的开始补全按钮。用户点击开始补全按钮，程序应运行deepseek API调用代码，将用户在诗词创作界面当前输入的文本（包含未填写的下划线占位符） + 预设的固定prompt字符串 + 用户在该界面额外输入的prompt文本，拼接后发送给API，并返回response。
● 固定的prompt（我可以在开发文件内修改）：下面是一个不完整的中国古代诗词，请你根据其中已有的内容按照我的提示进行补全，补全格式需要严格按照空的下划线进行填写。
● 返回形式：在大模型补全诗词界面的prompt输入框下面返回显示大模型的response，注意response只能有诗词本身；这里有两个按钮，一个是重新生成按钮：用户可以点击重新生成按钮选择重新生成（即再次调用返回新的结果），另一个是一键补全按钮，用户点击一键补全按钮，返回的诗词文本便会直接替换掉原来在诗词创作页面的诗词（正文部分，不替换标题作者）
功能6 卡片保存后在我的作品（就是主页面）中查看。
    ● 用户保存的卡片，可以在主界面查看
    ● 主页面由不同大小的卡片拼成（类似小红书），每个卡片上将显示标题或者句子（如果没有标题则摘选句子）。用户保存的原始的卡片和卡片生成页面保存的卡片都可以在这里展示，展示形式可以参考小红书和快手。点击其中一个卡片，则可以进入查看该卡片（此时为卡片展示页面）
    ● 卡片展示页面右上角有一个三个点的按钮，表示更多。点击该按钮，可以选择编辑、生成和删除。点击编辑则进入功能1的卡片创作界面；点击生成则进入功能4的卡片生成页面。点击删除，则弹出是否确认删除的按钮，用户点击是则删除该卡片，点击否则关闭该窗口。
    ●  默认按保存时间倒序排列。


● 页面总结
● 除了主页面，其他子页面、窗口都需要在左上角有一个返回按钮（点击返回到上一级页面/关闭该窗口）和主页按钮（点击返回到主页面）
● 应用包含了这些页面和窗口：
● 登录页面、注册界面
● 主页面：
● 请你注意主页面除了创作按钮和我的作品按钮外，右上角还有一个账户按钮，点击进去进入我的账户页面。在我的账户页面，请你实现用户可以修改密码的功能，并且用户可以编辑自己的用户名。修改密码的流程（需要验证旧密码）。API Key 管理：? 如果决定支持记住API Key，那么这里也需要提供查看（星号显示）和清除API Key的入口。
● 卡片创作页面与设置窗口，字体导入窗口，排列方向选择的界面
● 词牌推荐页面、推荐诗词展示界面、诗词创作页面
● 推荐韵脚页面、卡片生成页面、卡片背景选择窗口
● 大模型补全诗词界面、API key 窗口
● 我的作品页面、卡片展示页面
● 产品技术需求
● 前端：原生Android开发 (Java/Kotlin)。
● 使用Java开发后端，最后是写一个Android应用（我要在电脑端开发测试）使用Spring Boot框架
● 数据库类型：PostgreSQL
● 数据库设计草案：? 这是让AI生成代码的关键！提供关键表的字段设计：
● 用户表 (User)：?id (PK),?username (唯一),?password_hash?(存储哈希值，非明文！),?created_at,?updated_at
● 词牌库表(CiPai): 
●   - id(PK)
●   - name(词牌名)【开发者需在开发阶段通过SQL脚本或数据导入文件手动填充该字段】
●   - example_text(示例诗词文本) **【开发者需在开发阶段通过SQL脚本或数据导入文件手动填充该字段】**
●   - sentence_lengths(分句字数序列, e.g., [4,7,5,5] JSON或字符串存储) **【该字段由程序根据example_text自动解析生成，无需手动维护】**韵脚库表 (RhymeGroup)：?id (PK),?group_name?(e.g., "(ong,iong)", "(en,eng)", "(ün)"),?character_list?(该组包含的字符列表，JSON或字符串存储)
● 我的作品表 (MyWork)：?id (PK),?user_id (FK to User.id),?title?(可为空),?content?(卡片上的文本内容或生成的诗词内容),?work_type?(e.g., "raw_card", "template_poem", "shared_image" - 区分类型),?font_setting?(JSON存储字体、大小、颜色、方向),?background_info?(记录选择的背景类型或导入的图片路径),?created_at,?updated_at,?associated_cipai_id?(FK to CiPai.id, 如果是模板创作的诗词),?template_highlight_index?(记录选择了模板中哪个高亮位置填充原始卡片内容，如果是模板创作)
● APIKey表 (可选)： 如果支持记住Key,?user_id (FK),?encrypted_key,?created_at,?last_used_at
● 外部服务：? DeepSeek API调用。
● 关键接口定义（API设计）：? 为后端需要提供的核心接口定义草案（方法、URL、请求参数、响应体）。这对AI生成后端代码极其重要。
● ?示例：用户登录?
● POST /api/auth/login
● Request Body:?{ "username": "xxx", "password": "xxx" }
● Response (Success 200):?{ "token": "jwt_token_here", "userId": 123 }
● Response (Error 401):?{ "error": "用户名或密码错误" }
● ?示例：词牌匹配?
● POST /api/cipai/match
● Request Body:?{ "text": "用户输入的卡片文本" }?(e.g., "长夜邀孤月，予我半天星。")
● Response (Success 200):?{ "matchedCiPais": [ { "id": 1, "name": "临江仙", "example": "临江仙示例诗词..." }, { "id": 2, "name": "水调歌头", "example": "水调歌头示例诗词..." } ] }
● Response (No Match 200):?{ "matchedCiPais": [] }?// 或者用专门的状态码/消息
● Response (Empty Text 400):?{ "error": "请输入文本" }
● ?示例：韵脚查询?
● GET /api/rhyme/words?query=中
● Response (Success 200):?{ "rhymeGroup": "(ong,iong)", "words": ["冬", "农", "宗", "钟", ...] }?// 或者更结构化，如{ groupId: 1, groupName: "(ong,iong)", words: [...] }
● ?示例：调用大模型补全?
● POST /api/ai/completion
● Request Headers:?Authorization: Bearer <user_jwt_token>?(如果需要)
● Request Body:?{ "apiKey": "user_provided_key", // 或者从服务端存储获取 "partialPoem": "用户输入的未完诗词（带下划线占位）", "userPrompt": "用户输入的额外prompt" }
● Response (Success 200):?{ "completedPoem": "大模型返回的完整诗词文本（仅诗词）" }
● Response (Error - Network/API Failure 502):?{ "error": "大模型服务调用失败，请检查网络和API Key" }
● Response (Error - Invalid Key 401):?{ "error": "API Key无效或额度不足" }
● ?示例：保存作品?
● POST /api/work
● Request Headers:?Authorization: Bearer <user_jwt_token>
● Request Body:?{ ... (包含MyWork表所需字段) }?// 根据前端需要的数据结构化
● Response (Success 201):?{ "workId": 456 }
● 安全要求：?
● ?密码存储：?? ?强制要求！?? 必须使用安全的哈希算法（如 bcrypt, scrypt, PBKDF2）存储密码哈希值，?绝对禁止明文存储。在需求文档和技术需求部分明确强调。
● ?API通信：?? 登录和涉及敏感操作（如修改密码、调用大模型）的API必须使用 ?HTTPS。
● ?用户认证：?? 使用 ?JWT (JSON Web Token)?? 管理用户会话是推荐做法。在技术需求中明确。
● ?API Key 存储：?? 如果应用存储用户API Key，必须使用平台提供的安全存储机制（如 Android Keystore System）进行加密。明确要求。
● ?性能与边界条件：??
● ?词牌库大小：?? 预估初始词牌库大小（几十到几百首？），让AI对匹配效率有个概念。匹配逻辑在后端实现，效率相对可控。
● ?最大输入长度：?? 在卡片创作和诗词创作页面，对用户输入的文本长度做合理限制（例如单张卡片/诗词总字数限制），并在UI上提示（如“最大300字”）。避免布局问题或性能问题。
● ?韵脚库加载：?? 韵脚库相对固定且不大，可以考虑在App启动时或第一次进入推荐韵脚页面时加载到内存缓存中，避免频繁查询数据库。
● ?图片处理：?? 用户导入的背景图片需要压缩和/或裁剪以适应卡片尺寸，避免内存溢出(OOM)。在需求中提及需要处理图片大小。
● ?网络超时：?? 定义调用大模型API的超时时间（如 30秒）。
● ?错误处理与用户反馈：??
● 在需求描述中涉及用户操作的地方（登录失败、词牌无匹配、韵脚无结果、大模型调用失败、保存失败、网络错误等），?必须明确错误信息的展示方式?（Toast提示、Snackbar、在输入框下方显示错误信息等）。
● 在技术需求中要求对关键操作（网络请求、数据库操作）进行异常捕获和适当的错误处理。
● 产品UI设计
● UI要求尽量保持淡雅简洁和美观
● 尽量统一色调。你需要知道这是一个中国古典风格的软件，不要使用过于僵硬冰冷的现代程序配色。
● ?加载状态：?? 在任何可能耗时操作（网络请求：登录、注册、词牌匹配、韵脚查询、大模型补全、保存作品；图片加载）时，需要明确设计加载指示器（ProgressBar, Skeleton Screen等）。
● 空状态：? 明确“我的作品”为空、“词牌推荐”无结果、“韵脚查询”无结果、大模型未返回内容等情况下的空状态UI设计。提示文字，提示窗口要美观、风格统一。
● ?字体资源：??
  - 楷体、宋体: 使用Android系统字体
●   - 行书字体: **开发者需手动将字体文件(.ttf/.otf)放置在`app/src/main/assets/fonts/calligraphy/`目录**
●   - 用户导入字体: 存储在应用私有目录`/data/data/[包名]/files/user_fonts/`
● 默认值： 明确各项设置的默认值（默认字体：楷体，默认大小：16sp，默认排列：横排，默认颜色：白色，默认卡片背景：纯色风格·淡黑）。
●  默认卡片背景:
●   - 5种默认背景图片**需由开发者提供**并放置在资源目录
●   - 路径: `app/src/main/res/drawable/`
●   - 命名规范:
●     - 婉约风格: `bg_elegant`
●     - 豪放风格: `bg_heroic`
●     - 空白风格: `bg_blank`
●     - 朱红纯色: `bg_red_solid`
●     - 淡黑纯色: `bg_dark_solid`
● 
● ?交互反馈：?? 按钮点击效果（Ripple Effect）、输入框获得焦点的视觉变化等基础交互反馈需要确保实现。
● 依赖项 (Dependencies)
● 1. Android 客户端依赖
● ### Android 客户端依赖项
● - **核心框架**
●   - `androidx.appcompat:appcompat` (1.6.1+) - 基础兼容支持
●   - `androidx.core:core-ktx` (1.12.0+) - Kotlin扩展（可选但推荐）
●   - `androidx.constraintlayout:constraintlayout` (2.1.4+) - 高级布局管理
● - **网络通信**
●   - `com.squareup.retrofit2:retrofit` (2.9.0+) - REST API 调用
●   - `com.squareup.okhttp3:okhttp` (4.12.0+) - 网络层实现
●   - `com.squareup.okhttp3:logging-interceptor` (4.12.0+) - 网络调试
● - **本地存储**
●   - `androidx.room:room-runtime` (2.6.1+) - 数据库ORM
●   - `androidx.room:room-ktx` (2.6.1+) - Kotlin协程支持
●   - `androidx.datastore:datastore-preferences` (1.1.0+) - 轻量数据存储
● - **图片处理**
●   - `com.github.bumptech.glide:glide` (4.16.0+) - 图片加载与缓存
●   - `jp.wasabeef:glide-transformations` (4.3.0+) - 图片变换支持
● - **字体管理**
●   - `io.github.rosemoe.sora:editor` (0.21.1+) - 富文本编辑器（可选）
●   - `com.google.android.flexbox:flexbox` (3.0.0+) - 弹性字体布局
● - **安全存储**
●   - `androidx.security:security-crypto` (1.1.0-alpha06+) - API密钥加密
● - **UI组件**
●   - `com.google.android.material:material` (1.11.0+) - Material Design组件
●   - `androidx.recyclerview:recyclerview` (1.3.2+) - 瀑布流布局
● 后端服务依赖 (Spring Boot)
● ### 后端服务依赖项
● - **核心框架**
●   - `org.springframework.boot:spring-boot-starter-web` (3.2.0+)
●   - `org.springframework.boot:spring-boot-starter-data-jpa` (3.2.0+)
● - **数据库**
●   - `com.h2database:h2` (2.2.224+) - 开发测试
●   - `org.postgresql:postgresql` (42.7.0+) - 生产推荐
● - **安全认证**
●   - `org.springframework.boot:spring-boot-starter-security` (3.2.0+)
●   - `io.jsonwebtoken:jjwt-api` (0.12.3+)
●   - `io.jsonwebtoken:jjwt-impl` (0.12.3+)
●   - `io.jsonwebtoken:jjwt-jackson` (0.12.3+)
● - **AI集成**
●   - `org.springframework.ai:spring-ai-openai-spring-boot-starter` (0.8.0+) - DeepSeek API
● - **字体处理**
●   - `org.apache.pdfbox:pdfbox` (3.0.0+) - 字体解析
●   - `com.github.albfernandez:juniversalchardet` (2.4.0+) - 字体编码检测
●  大模型集成:
●   - **开发者需提供DeepSeek API的base URL和认证方式**
●   - 文档中提到的教学文档(.docx)**需由开发者提供**并放置在`app/src/main/assets/docs/`目录
● 字体管理策略
● 行书字体预置方案
● ### 字体预置规范
● 1. **字体资源位置**
●    - 开发者需将行书字体文件(.ttf/.otf)放置在：
●      `app/src/main/assets/fonts/calligraphy/`
●    - 命名规范：`[字体名]_regular.[扩展名]` (例: `xingshu_regular.ttf`)
● 2. **字体注册机制**
●    - 在应用启动时自动扫描字体目录：
●    ```kotlin
●    val fontFiles = assets.list("fonts/calligraphy")
●    fonts.addAll(fontFiles.map {
●        FontSpec("行书-${it.removeSuffix(".ttf").removeSuffix(".otf")}",
●                "asset://fonts/calligraphy/$it")
●    })
● #### 2. 用户导入字体管理
● ```markdown
● ### 用户字体管理规范
● 1. **存储位置**
●    - 私有目录：`/data/data/[包名]/files/user_fonts/`
●    - 文件名格式：`[用户ID]_[时间戳]_[原始文件名]` (例: `user123_1700000000_myfont.ttf`)
● 2. **数据库关联**
●    ```sql
●    ALTER TABLE MyWork ADD COLUMN font_spec TEXT;
●    -- font_spec JSON结构
●    {
●      "type": "user", // 或 "system"
●      "path": "user_fonts/user123_1700000000_myfont.ttf",
●      "name": "我的行书",
●      "checksum": "a1b2c3d4" // 文件MD5校验
●    }
● 字体导入流程：
● 1


● ### 三、 交互反馈规范
● #### 1. 触觉反馈标准
● ```markdown
● ### 交互反馈规范
● 1. **按钮点击效果**
●    - 使用Material规范的波纹动画：
●    ```xml
●      android:background="?attr/selectableItemBackgroundBorderless"
●      android:foreground="?attr/selectableItemBackground"/>
● 重要操作添加触觉反馈：
● view.performHapticFeedback(HapticFeedbackConstants.CONTEXT_CLICK)
● 输入框焦点反馈
● <com.google.android.material.textfield.TextInputLayout   app:boxStrokeColor="@color/primary"   app:boxStrokeWidthFocused="2dp">      <com.google.android.material.textfield.TextInputEditText     android:drawableTint="@color/primary"/> </com.google.android.material.textfield.TextInputLayout>
● 状态反馈体系
● 交互类型    视觉反馈                           动效时长                     触觉反馈
● 按钮点击	波纹扩散+颜色加深	200ms	                CONTEXT_CLICK
● 卡片选择	边框高亮+轻微上浮	150ms	                 VIRTUAL_KEY
● 输入框聚焦	下划线加粗+标签动画	300ms	                       无
● 操作成功	Snackbar(绿色)+图标动画	500ms	                CONFIRM
● 操作失败	Snackbar(红色)+震动	500ms	                      REJECT
● 加载状态	骨架屏+进度环	            -	                                        无
● #### 2. 微交互增强方案
● ```markdown
● ### 诗词创作特殊反馈
● 1. **模板匹配高亮**
●    - 使用脉冲动画突出显示匹配区域：
●    ```kotlin
●    ObjectAnimator.ofArgb(textView, "backgroundColor",
●          Color.TRANSPARENT, Color.parseColor("#33FF9800"), Color.TRANSPARENT)
●      .setDuration(800)
●      .start()
● 韵脚选择反馈?
● 磁吸效果：当拖拽韵脚字靠近填词区时自动吸附
● 粒子动画：韵脚字填入时的墨迹扩散效果
● ?保存成功反馈?
● 水墨扩散动画：从保存按钮中心扩散的圆形水墨效果
● 纸卷收起动效：卡片边缘自动卷起+纸张摩擦音效
● ## 技术实现要点
● ### 字体加载优化
● ```kotlin
● // 字体缓存池（避免重复加载）
● object FontLoader {
●     private val cache = mutableMapOf()
●     fun loadFont(context: Context, spec: FontSpec): Typeface {
●         return cache[spec.path] ?: run {
●             val typeface = when (spec.type) {
●                 "asset" -> Typeface.createFromAsset(context.assets, spec.path)
●                 "file" -> Typeface.createFromFile(File(context.filesDir, spec.path))
●                 else -> Typeface.DEFAULT
●             }
●             cache[spec.path] = typeface
●             typeface
●         }
●     }
● }
● 安全存储实现
● // API密钥加密存储
● fun saveApiKey(context: Context, key: String) {
●     val masterKey = MasterKey.Builder(context)
●         .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)
●         .build()
●     val encryptedPrefs = EncryptedSharedPreferences.create(
●         context,
●         "secret_credentials",
●         masterKey,
●         EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
●         EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
●     )
●     encryptedPrefs.edit().putString("DEEPSEEK_API_KEY", key).apply()
● }
● 词牌匹配优化
● -- 高效匹配查询（PostgreSQL示例）
● SELECT * FROM cipai
● WHERE EXISTS (
●     SELECT 1
●     FROM json_array_elements(sentence_lengths) AS len
●     GROUP BY (len->>'position')::int
●     HAVING string_agg((len->>'length')::text, ',' ) = '5,5'
● );
● 部署建议?：对于词牌匹配服务，初期可使用SQLite本地实现，当词牌库超过500首时迁移至PostgreSQL并建立GIN索引优化查询性能。
● UI图示说明
● 主页面布局 (HomeActivity)
● [顶部状态栏]
● [导航栏]
●   左：空
●   中："未言"
●   右：账户图标（人头轮廓）
● [主体区域 - 垂直居中]
●   ┌───────────────────┐
●   │  [创作按钮]                          │ ← 毛笔图标 + "开始创作" 文字
●   │  (占宽70% 高15%)             │
●   ├───────────────────┤
●   │  [我的作品按钮]                     │ ← 画卷图标 + "我的珍藏" 文字
●   │  (同尺寸)                                │
●   └───────────────────┘
● [底部留白30%区域]
● 卡片创作页面 (CardCreateActivity)
● [顶部导航栏]
●   左：← 返回按钮
●   中："灵感卡片"
●   右：?? 设置按钮
● [卡片预览区]（居中，占屏宽80%，高60%）
●   ┌───────────────────┐
●   │  [文本编辑区]                         │ ← 可输入多行文本
●   │  "长夜邀孤月..."                      │
●   │                                                │
●   └───────────────────┘
●   [??] ← 悬浮于卡片右上角
● [底部操作栏]
●   ┌───────┬───────┐
●   │ 词牌         │ 保存          │ ← 左右并排按钮
●   └───────┴───────┘
● 设置弹窗 (StyleDialogFragment)
● [模态弹窗]（覆盖底部40%区域）
● ┌─────────────────────┐
● │ 字体选择 ▼                                 │ ← 下拉选择框
● ├─────────────────────┤
● │ 字号调节 [ - 14 + ]                     │ ← 带加减号的滑块
● ├─────────────────────┤
● │ ● 横排   ○ 竖排                            │ ← 单选按钮组
● ├─────────────────────┤
● │ 颜色 ▉▉▉▉▉                               │ ← 色块选择器(黑/白/金/红)
● │ ▉▉▉▉▉                                       │
● └─────────────────────┘
● 词牌推荐页 (CiPaiRecommendSheet)
● [底部上滑面板]（占屏高60%）
● ▲ ← 顶部下拉箭头（居中）
● [搜索框] ?? 输入词牌名...
● [推荐区 - 网格布局]
● ┌───┬───┬───┐
● │临江仙│水调歌│浣溪沙│ ← 方形按钮(3列)
● ├───┼───┼───┤
● │菩萨蛮│虞美人│...  │
● └───┴───┴───┘
● 诗词创作页面 (PoemComposeActivity)
● [顶部导航栏]
●   左：← 返回
●   中："临江仙·创作"
●   右：↗ 分享
● [标题区]
● [__________]
● [__________]
● [正文区]（带下划线模板）
● ┌─────────────────────┐
● │ ______________                             │
● │ ______________                            │
● │ [高亮区域]                                  │ ← 黄色背景
● │ 长夜邀孤月                                  │
● │ 予我半天星                                   │
● │ [高亮区域]                                     │
● │ ______________                               │
● └─────────────────────┘
● [功能按钮区]（底部固定）
● ┌─────┬─────┬─────┬─────┐
● │ 韵脚 │ 灵感 │ 设置 │ 保存 │ ← 等宽图标+文字
● └─────┴─────┴─────┴─────┘
● 我的作品页 (GalleryActivity)
● [顶部导航栏]
●   左：← 返回
●   中："我的珍藏"
●   右：? 筛选
● [瀑布流布局]（StaggeredGridLayout）
● ┌───────┬───────┐
● │ 春晓   │ 静夜思           │
● │ 春眠...│ 床前...             │ ← 卡片尺寸不一
● ├───┴──────┤         │
● │ 水调歌头  │                  │
● │ 明月几...├─────┤
● └───────┴───────┘
● <!-- 瀑布流布局示例 --> <androidx.recyclerview.widget.RecyclerView     android:layout_width="match_parent"     android:layout_height="match_parent"     app:layoutManager="androidx.recyclerview.widget.StaggeredGridLayoutManager"     app:spanCount="2"/>













